pipeline {
    agent {
        docker {
            image 'node:18-alpine' // Or another suitable Node.js image with Newman
            args '-v /var/run/docker.sock:/var/run/docker.sock' // If needed for Docker-in-Docker
        }
    }
    environment {
        BASE_URL = 'https://api.demoblaze.com'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ayamaher88/Testing-E-Commerce-.git'
            }
        }

        stage('Run API Tests with Newman') {
            steps {
                echo 'Running API Tests with Newman...'
                sh 'npm install -g newman' // Install newman
                script {
                    def environmentJson = """
                    {
                        "values": [
                            {
                                "key": "baseUrl",
                                "value": "${env.BASE_URL}",
                                "enabled": true
                            }
                        ]
                    }
                    """
                    writeFile file: 'environment.json', text: environmentJson

                    def newmanResult = sh(
                        script: 'newman run "API Testing/Demoblaze API Tests.postman_collection.json" -e environment.json --reporters cli,junit --reporter-junit-export results.xml',
                        returnStatus: true
                    )

                    deleteDir()

                    if (newmanResult != 0) {
                        error "Newman tests failed!"
                    }
                }
            }
            post {
                always {
                    junit 'results.xml' // Publish JUnit results (requires JUnit plugin)
                }
            }
        }

        stage('Post-Build Actions') {
            steps {
                script {
                    echo 'Performing post-build actions...'
                    // Add your actual post-build steps here
                }
            }
        }
    }
}
